@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>@WorkContext.CurrentSite.SiteName</title>
    <!-- Bootstrap Core CSS -->
    <!-- Bootstrap Core CSS -->
    <link href="/Themes/EnjoyTheme/Content/styles/bootstrap.min.css" rel="stylesheet">
    <!-- MetisMenu CSS -->
    <link href="/Themes/EnjoyTheme/Content/styles/metisMenu.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/Themes/EnjoyTheme/Content/styles/sb-admin-2.css" rel="stylesheet">
    <!-- Custom Fonts -->
    <link href="/Themes/EnjoyTheme/Content/styles/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link href="/Themes/EnjoyTheme/Content/styles/jquery.slider.css" rel="stylesheet" type="text/css">
    /* Some useful shortcuts or settings
  ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (httpEquiv: "X-UA-Compatible", content: "IE=edge,chrome=1");
    Style.Include("//fonts.googleapis.com/css?family=Lobster&subset=latin");
    Style.Include("default-grid.css");
    Style.Include("site.css");

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass))
    {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass))
    {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.Header.Add(New.Branding(), "5"); // Site name and link to the home page
    WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Orchard
    WorkContext.Layout.Footer.Add(New.User(), "10"); // Login and dashboard links

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
}
<div id="wrapper">
    <nav class="navbar navbar-default navbar-static-top" role="navigation" style="margin-bottom: 0">
        @if (Model.Navigation != null)
        {
            Zone(Model.Navigation);
        }
    </nav>
    @if (Model.Content != null)
    {
        Zone(Model.Content);
    }
</div>
@using (Script.Foot())
{
    <script src="/Themes/EnjoyTheme/Content/scripts/jquery.min.js"></script>
    <!-- Bootstrap Core JavaScript -->
    <script src="/Themes/EnjoyTheme/Content/scripts/bootstrap.min.js"></script>
    <!-- Metis Menu Plugin JavaScript -->
    <script src="/Themes/EnjoyTheme/Content/scripts//metisMenu.min.js"></script>
    <!-- Morris Charts JavaScript -->
    <script src="/Themes/EnjoyTheme/Content/scripts/raphael.min.js"></script>
    <script src="/Themes/EnjoyTheme/Content/scripts/morris.min.js"></script>
    <script src="/Themes/EnjoyTheme/Content/scripts/morris-data.js"></script>
    <!-- Custom Theme JavaScript -->
    <script src="/Themes/EnjoyTheme/Content/scripts/sb-admin-2.js"></script>
}
